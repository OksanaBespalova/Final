from tkinter import *
from tkinter import messagebox
from sqlalchemy.orm import sessionmaker
import math

from Project_base import Projektai, engine
from paints import *
from bases import *

Session = sessionmaker(bind=engine)
session = Session()

langas = Tk()
langas.title('Dazymo projektai')
langas.iconbitmap('ilustracoes_75465.ico')

scroll_y = Scrollbar(langas)
listbox = Listbox(langas, yscrollcommand=scroll_y.set)
scroll_y.config(command=listbox.yview)

meniu = Menu(langas)
langas.config(menu=meniu)
submeniu = Menu(meniu, tearoff=0)

projs = session.query(Projektai).all()
for x in projs:
    listbox.insert(END, x)

paint = dazai
pasirinkimas = StringVar(langas)
pasirinkimas.set(paint[0])

def wind_sqm(event):
    laukas_wind_sqm.config(state=NORMAL)
    kiekis = 0
    try:
        kiekis += float(laukas_wind_qty.get())
    except ValueError:
        laukas_wind_qty.insert(0, 'Iveskite skaiciu')
    ilgis = 0
    try:
        ilgis += float(laukas_wind_h.get())
    except ValueError:
        laukas_wind_h.insert(0, 'Iveskite skaiciu, m')
    plotis = 0
    try:
        plotis += float(laukas_wind_w.get())
    except ValueError:
        laukas_wind_w.insert(0, 'Iveskite skaiciu, m')
    plotas = ilgis * plotis * kiekis
    laukas_wind_sqm.delete(0, END)
    laukas_wind_sqm.insert(0, plotas)
    laukas_wind_sqm.config(state=DISABLED)

def door_sqm(event):
    laukas_door_sqm.config(state=NORMAL)
    kiekis = 0
    try:
        kiekis += float(laukas_door_qty.get())
    except ValueError:
        laukas_door_qty.insert(0, 'Iveskite skaiciu')
    ilgis = 0
    try:
        ilgis += float(laukas_door_h.get())
    except ValueError:
        laukas_door_h.insert(0, 'Iveskite skaiciu, m')
    plotis = 0
    try:
        plotis += float(laukas_door_w.get())
    except ValueError:
        laukas_door_h.insert(0, 'Iveskite skaiciu, m')
    plotas = ilgis * plotis * kiekis
    laukas_door_sqm.delete(0, END)
    laukas_door_sqm.insert(0, plotas)
    laukas_door_sqm.config(state=DISABLED)

def paint_wor(event):
    laukas_fas_wor.config(state=NORMAL)
    fas_sqm = 0
    try:
        fas_sqm += float(laukas_fas_sqm.get())
    except ValueError:
        laukas_fas_sqm.insert(0, 'Iveskite skaiciu')
    plotas = fas_sqm - (float(laukas_wind_sqm.get()) + float(laukas_door_sqm.get()))
    laukas_fas_wor.delete(0, END)
    laukas_fas_wor.insert(0, plotas)
    laukas_fas_wor.config(state=DISABLED)

def pack_vol(event):
    laukas_fas_vol.config(state=NORMAL)
    tmp_vol = pasirinkimas.get()
    vol = 0
    for x in paints:
        if x[0] == tmp_vol:
            vol += x[2]
        else:
            pass
    laukas_fas_vol.delete(0, END)
    laukas_fas_vol.insert(0, vol)
    laukas_fas_vol.config(state=DISABLED)
    gr_qty = bases_norma * float(laukas_fas_wor.get())
    gr_packs = math.ceil(gr_qty / volume_base)
    laukas_gr_qty.config(state=NORMAL)
    laukas_gr_qty.delete(0, END)
    laukas_gr_qty.insert(0, gr_packs)
    laukas_gr_qty.config(state=DISABLED)
    gr_price = float(gr_packs * kaina_base)
    laukas_gr_price.config(state=NORMAL)
    laukas_gr_price.delete(0, END)
    laukas_gr_price.insert(0, gr_price)
    laukas_gr_price.config(state=DISABLED)
    dz_qty = dazo_norma * float(laukas_fas_wor.get())
    dz_packs = math.ceil(dz_qty / vol)
    laukas_dz_qty.config(state=NORMAL)
    laukas_dz_qty.delete(0, END)
    laukas_dz_qty.insert(0, dz_packs)
    laukas_dz_qty.config(state=DISABLED)
    tmp_price = 0
    for x in paints:
        if x[0] == tmp_vol:
            tmp_price += x[3]
        else:
            pass
    price = float(tmp_price) * dz_packs
    laukas_dz_price.config(state=NORMAL)
    laukas_dz_price.delete(0, END)
    laukas_dz_price.insert(0, price)
    laukas_dz_price.config(state=DISABLED)
    price_total = gr_price + price
    laukas_total.config(state=NORMAL)
    laukas_total.delete(0, END)
    laukas_total.insert(0, price_total)
    laukas_total.config(state=DISABLED)

def naujas():
    laukas_id.config(state=NORMAL)
    laukas_id.delete(0, END)
    laukas_id.config(state=DISABLED)
    laukas_part.config(state=NORMAL)
    laukas_part.delete(0, END)
    laukas_add.config(state=NORMAL)
    laukas_add.delete(0, END)
    laukas_wind_qty.config(state=NORMAL)
    laukas_wind_qty.delete(0, END)
    laukas_wind_qty.insert(0, 'Iveskite skaiciu')
    laukas_wind_h.config(state=NORMAL)
    laukas_wind_h.delete(0, END)
    laukas_wind_h.insert(0, 'Iveskite skaiciu, m')
    laukas_wind_w.config(state=NORMAL)
    laukas_wind_w.delete(0, END)
    laukas_wind_w.insert(0, 'Iveskite skaiciu, m')
    laukas_wind_sqm.config(state=NORMAL)
    laukas_wind_sqm.delete(0, END)
    laukas_wind_sqm.config(state=DISABLED)
    laukas_door_qty.config(state=NORMAL)
    laukas_door_qty.delete(0, END)
    laukas_door_qty.insert(0, 'Iveskite skaiciu')
    laukas_door_h.config(state=NORMAL)
    laukas_door_h.delete(0, END)
    laukas_door_h.insert(0, 'Iveskite skaiciu, m')
    laukas_door_w.config(state=NORMAL)
    laukas_door_w.delete(0, END)
    laukas_door_w.insert(0, 'Iveskite skaiciu, m')
    laukas_door_sqm.config(state=NORMAL)
    laukas_door_sqm.delete(0, END)
    laukas_door_sqm.config(state=DISABLED)
    laukas_fas_sqm.config(state=NORMAL)
    laukas_fas_sqm.delete(0, END)
    laukas_fas_sqm.insert(0, 'Iveskite skaiciu, m2')
    laukas_fas_wor.config(state=NORMAL)
    laukas_fas_wor.delete(0, END)
    laukas_fas_wor.config(state=DISABLED)
    laukas_fas_vol.config(state=NORMAL)
    laukas_fas_vol.delete(0, END)
    laukas_fas_vol.config(state=DISABLED)
    laukas_gr_qty.config(state=NORMAL)
    laukas_gr_qty.delete(0, END)
    laukas_gr_qty.config(state=DISABLED)
    laukas_gr_price.config(state=NORMAL)
    laukas_gr_price.delete(0, END)
    laukas_gr_price.config(state=DISABLED)
    laukas_dz_qty.config(state=NORMAL)
    laukas_dz_qty.delete(0, END)
    laukas_dz_qty.config(state=DISABLED)
    laukas_dz_price.config(state=NORMAL)
    laukas_dz_price.delete(0, END)
    laukas_dz_price.config(state=DISABLED)
    laukas_total.config(state=NORMAL)
    laukas_total.delete(0, END)
    laukas_total.config(state=DISABLED)
    listbox.delete(0, END)
    projs = session.query(Projektai).all()
    for x in projs:
        listbox.insert(END, x)

def irasyti():
    partner = laukas_part.get()
    address = laukas_add.get()
    wind_qty = laukas_wind_qty.get()
    wind_h = laukas_wind_h.get()
    wind_w = laukas_wind_w.get()
    laukas_wind_sqm.config(state=NORMAL)
    wind_sqm = laukas_wind_sqm.get()
    door_qty = laukas_door_qty.get()
    door_h = laukas_door_h.get()
    door_w = laukas_door_w.get()
    laukas_door_sqm.config(state=NORMAL)
    door_sqm = laukas_door_sqm.get()
    fas_sqm = laukas_fas_sqm.get()
    laukas_fas_wor.config(state=NORMAL)
    paint_sqm = laukas_fas_wor.get()
    paint = pasirinkimas.get()
    laukas_fas_vol.config(state=NORMAL)
    pack_volume = laukas_fas_vol.get()
    laukas_gr_qty.config(state=NORMAL)
    base_qty = laukas_gr_qty.get()
    laukas_gr_price.config(state=NORMAL)
    base_price = laukas_gr_price.get()
    laukas_dz_qty.config(state=NORMAL)
    paint_qty = laukas_dz_qty.get()
    laukas_dz_price.config(state=NORMAL)
    paint_price = laukas_dz_price.get()
    laukas_total.config(state=NORMAL)
    project_price = laukas_total.get()
    proj = Projektai(partner, address, wind_qty, wind_h, wind_w, wind_sqm, door_qty, door_h, door_w,
                 door_sqm, fas_sqm, paint_sqm, paint, pack_volume, base_qty, base_price, paint_qty,
                 paint_price, project_price)
    session.add(proj)
    session.commit()
    laukas_part.delete(0, END)
    laukas_add.delete(0, END)
    laukas_wind_qty.delete(0, END)
    laukas_wind_h.delete(0, END)
    laukas_wind_w.delete(0, END)
    laukas_wind_sqm.delete(0, END)
    laukas_wind_sqm.config(state=DISABLED)
    laukas_door_qty.delete(0, END)
    laukas_door_h.delete(0, END)
    laukas_door_w.delete(0, END)
    laukas_door_sqm.delete(0, END)
    laukas_door_sqm.config(state=DISABLED)
    laukas_fas_sqm.delete(0, END)
    laukas_fas_wor.delete(0, END)
    laukas_fas_wor.config(state=DISABLED)
    laukas_fas_vol.delete(0, END)
    laukas_fas_vol.config(state=DISABLED)
    laukas_gr_qty.delete(0, END)
    laukas_gr_qty.config(state=DISABLED)
    laukas_gr_price.delete(0, END)
    laukas_gr_price.config(state=DISABLED)
    laukas_dz_qty.delete(0, END)
    laukas_dz_qty.config(state=DISABLED)
    laukas_dz_price.delete(0, END)
    laukas_dz_price.config(state=DISABLED)
    laukas_total.delete(0, END)
    laukas_total.config(state=DISABLED)
    listbox.delete(0, END)
    projs = session.query(Projektai).all()
    for x in projs:
        listbox.insert(END, x)

def perziureti():
    laukas_part.config(state=NORMAL)
    laukas_part.delete(0, END)
    laukas_add.config(state=NORMAL)
    laukas_add.delete(0, END)
    laukas_wind_qty.config(state=NORMAL)
    laukas_wind_qty.delete(0, END)
    laukas_wind_h.config(state=NORMAL)
    laukas_wind_h.delete(0, END)
    laukas_wind_w.config(state=NORMAL)
    laukas_wind_w.delete(0, END)
    laukas_wind_sqm.config(state=NORMAL)
    laukas_wind_sqm.delete(0, END)
    laukas_wind_sqm.config(state=DISABLED)
    laukas_door_qty.config(state=NORMAL)
    laukas_door_qty.delete(0, END)
    laukas_door_h.config(state=NORMAL)
    laukas_door_h.delete(0, END)
    laukas_door_w.config(state=NORMAL)
    laukas_door_w.delete(0, END)
    laukas_door_sqm.config(state=NORMAL)
    laukas_door_sqm.delete(0, END)
    laukas_door_sqm.config(state=DISABLED)
    laukas_fas_sqm.config(state=NORMAL)
    laukas_fas_sqm.delete(0, END)
    laukas_fas_wor.config(state=NORMAL)
    laukas_fas_wor.delete(0, END)
    laukas_fas_wor.config(state=DISABLED)
    laukas_fas_vol.config(state=NORMAL)
    laukas_fas_vol.delete(0, END)
    laukas_fas_vol.config(state=DISABLED)
    laukas_gr_qty.config(state=NORMAL)
    laukas_gr_qty.delete(0, END)
    laukas_gr_qty.config(state=DISABLED)
    laukas_gr_price.config(state=NORMAL)
    laukas_gr_price.delete(0, END)
    laukas_gr_price.config(state=DISABLED)
    laukas_dz_qty.config(state=NORMAL)
    laukas_dz_qty.delete(0, END)
    laukas_dz_qty.config(state=DISABLED)
    laukas_dz_price.config(state=NORMAL)
    laukas_dz_price.delete(0, END)
    laukas_dz_price.config(state=DISABLED)
    laukas_total.config(state=NORMAL)
    laukas_total.delete(0, END)
    laukas_total.config(state=DISABLED)
    laukas_id.config(state=NORMAL)
    laukas_id.insert(0, 'Iveskite ID ir paspauskite Rodyti')

def rodyti():
    rod_id = laukas_id.get()
    rod = session.query(Projektai).get(rod_id)
    laukas_part.insert(0, rod.partner)
    laukas_add.insert(0, rod.address)
    laukas_wind_qty.insert(0, rod.wind_qty)
    laukas_wind_h.insert(0, rod.wind_h)
    laukas_wind_w.insert(0, rod.wind_w)
    laukas_wind_sqm.config(state=NORMAL)
    laukas_wind_sqm.insert(0, rod.wind_sqm)
    laukas_door_qty.insert(0, rod.door_qty)
    laukas_door_h.insert(0, rod.door_h)
    laukas_door_w.insert(0, rod.door_w)
    laukas_door_sqm.config(state=NORMAL)
    laukas_door_sqm.insert(0, rod.door_sqm)
    laukas_fas_sqm.insert(0, rod.fas_sqm)
    laukas_fas_wor.config(state=NORMAL)
    laukas_fas_wor.insert(0, rod.paint_sqm)
    laukas_fas_vol.config(state=NORMAL)
    laukas_fas_vol.insert(0, rod.pack_volume)
    pasirinkimas.set(rod.paint)
    laukas_gr_qty.config(state=NORMAL)
    laukas_gr_qty.insert(0, rod.base_qty)
    laukas_gr_price.config(state=NORMAL)
    laukas_gr_price.insert(0, rod.base_price)
    laukas_dz_qty.config(state=NORMAL)
    laukas_dz_qty.insert(0, rod.paint_qty)
    laukas_dz_price.config(state=NORMAL)
    laukas_dz_price.insert(0, rod.paint_price)
    laukas_total.config(state=NORMAL)
    laukas_total.insert(0, rod.project_price)
    laukas_id.config(state=DISABLED)
    laukas_part.config(state=DISABLED)
    laukas_add.config(state=DISABLED)
    laukas_wind_qty.config(state=DISABLED)
    laukas_wind_h.config(state=DISABLED)
    laukas_wind_w.config(state=DISABLED)
    laukas_wind_sqm.config(state=DISABLED)
    laukas_door_qty.config(state=DISABLED)
    laukas_door_h.config(state=DISABLED)
    laukas_door_w.config(state=DISABLED)
    laukas_door_sqm.config(state=DISABLED)
    laukas_fas_sqm.config(state=DISABLED)
    laukas_fas_wor.config(state=DISABLED)
    laukas_fas_vol.config(state=DISABLED)
    laukas_gr_qty.config(state=DISABLED)
    laukas_gr_price.config(state=DISABLED)
    laukas_dz_qty.config(state=DISABLED)
    laukas_dz_price.config(state=DISABLED)
    laukas_total.config(state=DISABLED)

def keisti():
    laukas_part.config(state=NORMAL)
    laukas_part.delete(0, END)
    laukas_add.config(state=NORMAL)
    laukas_add.delete(0, END)
    laukas_wind_qty.config(state=NORMAL)
    laukas_wind_qty.delete(0, END)
    laukas_wind_h.config(state=NORMAL)
    laukas_wind_h.delete(0, END)
    laukas_wind_w.config(state=NORMAL)
    laukas_wind_w.delete(0, END)
    laukas_wind_sqm.config(state=NORMAL)
    laukas_wind_sqm.delete(0, END)
    laukas_wind_sqm.config(state=DISABLED)
    laukas_door_qty.config(state=NORMAL)
    laukas_door_qty.delete(0, END)
    laukas_door_h.config(state=NORMAL)
    laukas_door_h.delete(0, END)
    laukas_door_w.config(state=NORMAL)
    laukas_door_w.delete(0, END)
    laukas_door_sqm.config(state=NORMAL)
    laukas_door_sqm.delete(0, END)
    laukas_door_sqm.config(state=DISABLED)
    laukas_fas_sqm.config(state=NORMAL)
    laukas_fas_sqm.delete(0, END)
    laukas_fas_wor.config(state=NORMAL)
    laukas_fas_wor.delete(0, END)
    laukas_fas_wor.config(state=DISABLED)
    laukas_fas_vol.config(state=NORMAL)
    laukas_fas_vol.delete(0, END)
    laukas_fas_vol.config(state=DISABLED)
    laukas_gr_qty.config(state=NORMAL)
    laukas_gr_qty.delete(0, END)
    laukas_gr_qty.config(state=DISABLED)
    laukas_gr_price.config(state=NORMAL)
    laukas_gr_price.delete(0, END)
    laukas_gr_price.config(state=DISABLED)
    laukas_dz_qty.config(state=NORMAL)
    laukas_dz_qty.delete(0, END)
    laukas_dz_qty.config(state=DISABLED)
    laukas_dz_price.config(state=NORMAL)
    laukas_dz_price.delete(0, END)
    laukas_dz_price.config(state=DISABLED)
    laukas_total.config(state=NORMAL)
    laukas_total.delete(0, END)
    laukas_total.config(state=DISABLED)
    laukas_id.config(state=NORMAL)
    laukas_id.insert(0, 'Iveskite ID ir paspauskite ENTER')

def parodymas(event):
    rod_id = laukas_id.get()
    rod = session.query(Projektai).get(rod_id)
    laukas_id.config(state=DISABLED)
    laukas_part.insert(0, rod.partner)
    laukas_add.insert(0, rod.address)
    laukas_wind_qty.insert(0, rod.wind_qty)
    laukas_wind_h.insert(0, rod.wind_h)
    laukas_wind_w.insert(0, rod.wind_w)
    laukas_wind_sqm.config(state=NORMAL)
    laukas_wind_sqm.insert(0, rod.wind_sqm)
    laukas_wind_sqm.config(state=DISABLED)
    laukas_door_qty.insert(0, rod.door_qty)
    laukas_door_h.insert(0, rod.door_h)
    laukas_door_w.insert(0, rod.door_w)
    laukas_door_sqm.config(state=NORMAL)
    laukas_door_sqm.insert(0, rod.door_sqm)
    laukas_door_sqm.config(state=DISABLED)
    laukas_fas_sqm.insert(0, rod.fas_sqm)
    laukas_fas_wor.config(state=NORMAL)
    laukas_fas_wor.insert(0, rod.paint_sqm)
    laukas_fas_wor.config(state=DISABLED)
    laukas_fas_vol.config(state=NORMAL)
    laukas_fas_vol.insert(0, rod.pack_volume)
    laukas_fas_vol.config(state=DISABLED)
    pasirinkimas.set(rod.paint)
    laukas_gr_qty.config(state=NORMAL)
    laukas_gr_qty.insert(0, rod.base_qty)
    laukas_gr_qty.config(state=DISABLED)
    laukas_gr_price.config(state=NORMAL)
    laukas_gr_price.insert(0, rod.base_price)
    laukas_gr_price.config(state=DISABLED)
    laukas_dz_qty.config(state=NORMAL)
    laukas_dz_qty.insert(0, rod.paint_qty)
    laukas_dz_qty.config(state=DISABLED)
    laukas_dz_price.config(state=NORMAL)
    laukas_dz_price.insert(0, rod.paint_price)
    laukas_dz_price.config(state=DISABLED)
    laukas_total.config(state=NORMAL)
    laukas_total.insert(0, rod.project_price)
    laukas_total.config(state=DISABLED)

def saugoti():
    laukas_id.config(state=NORMAL)
    red_id = laukas_id.get()
    red = session.query(Projektai).get(red_id)
    red.partner = laukas_part.get()
    red.address = laukas_add.get()
    red.wind_qty = laukas_wind_qty.get()
    red.wind_h = laukas_wind_h.get()
    red.wind_w = laukas_wind_w.get()
    laukas_wind_sqm.config(state=NORMAL)
    red.wind_sqm = laukas_wind_sqm.get()
    red.door_qty = laukas_door_qty.get()
    red.door_h = laukas_door_h.get()
    red.door_w = laukas_door_w.get()
    laukas_door_sqm.config(state=NORMAL)
    red.door_sqm = laukas_door_sqm.get()
    red.fas_sqm = laukas_fas_sqm.get()
    laukas_fas_wor.config(state=NORMAL)
    red.paint_sqm = laukas_fas_wor.get()
    red.paint = pasirinkimas.get()
    laukas_fas_vol.config(state=NORMAL)
    red.pack_volume = laukas_fas_vol.get()
    laukas_gr_qty.config(state=NORMAL)
    red.base_qty = laukas_gr_qty.get()
    laukas_gr_price.config(state=NORMAL)
    red.base_price = laukas_gr_price.get()
    laukas_dz_qty.config(state=NORMAL)
    red.paint_qty = laukas_dz_qty.get()
    laukas_dz_price.config(state=NORMAL)
    red.paint_price = laukas_dz_price.get()
    laukas_total.config(state=NORMAL)
    red.project_price = laukas_total.get()
    session.commit()
    laukas_part.delete(0, END)
    laukas_add.delete(0, END)
    laukas_wind_qty.delete(0, END)
    laukas_wind_h.delete(0, END)
    laukas_wind_w.delete(0, END)
    laukas_wind_sqm.delete(0, END)
    laukas_wind_sqm.config(state=DISABLED)
    laukas_door_qty.delete(0, END)
    laukas_door_h.delete(0, END)
    laukas_door_w.delete(0, END)
    laukas_door_sqm.delete(0, END)
    laukas_door_sqm.config(state=DISABLED)
    laukas_fas_sqm.delete(0, END)
    laukas_fas_wor.delete(0, END)
    laukas_fas_wor.config(state=DISABLED)
    laukas_fas_vol.delete(0, END)
    laukas_fas_vol.config(state=DISABLED)
    laukas_gr_qty.delete(0, END)
    laukas_gr_qty.config(state=DISABLED)
    laukas_gr_price.delete(0, END)
    laukas_gr_price.config(state=DISABLED)
    laukas_dz_qty.delete(0, END)
    laukas_dz_qty.config(state=DISABLED)
    laukas_dz_price.delete(0, END)
    laukas_dz_price.config(state=DISABLED)
    laukas_total.delete(0, END)
    laukas_total.config(state=DISABLED)
    laukas_id.delete(0, END)
    laukas_id.config(state=DISABLED)
    listbox.delete(0, END)
    projs = session.query(Projektai).all()
    for x in projs:
        listbox.insert(END, x)

def istrinti():
    laukas_part.config(state=NORMAL)
    laukas_part.delete(0, END)
    laukas_add.config(state=NORMAL)
    laukas_add.delete(0, END)
    laukas_wind_qty.config(state=NORMAL)
    laukas_wind_qty.delete(0, END)
    laukas_wind_h.config(state=NORMAL)
    laukas_wind_h.delete(0, END)
    laukas_wind_w.config(state=NORMAL)
    laukas_wind_w.delete(0, END)
    laukas_wind_sqm.config(state=NORMAL)
    laukas_wind_sqm.delete(0, END)
    laukas_wind_sqm.config(state=DISABLED)
    laukas_door_qty.config(state=NORMAL)
    laukas_door_qty.delete(0, END)
    laukas_door_h.config(state=NORMAL)
    laukas_door_h.delete(0, END)
    laukas_door_w.config(state=NORMAL)
    laukas_door_w.delete(0, END)
    laukas_door_sqm.config(state=NORMAL)
    laukas_door_sqm.delete(0, END)
    laukas_door_sqm.config(state=DISABLED)
    laukas_fas_sqm.config(state=NORMAL)
    laukas_fas_sqm.delete(0, END)
    laukas_fas_wor.config(state=NORMAL)
    laukas_fas_wor.delete(0, END)
    laukas_fas_wor.config(state=DISABLED)
    laukas_fas_vol.config(state=NORMAL)
    laukas_fas_vol.delete(0, END)
    laukas_fas_vol.config(state=DISABLED)
    laukas_gr_qty.config(state=NORMAL)
    laukas_gr_qty.delete(0, END)
    laukas_gr_qty.config(state=DISABLED)
    laukas_gr_price.config(state=NORMAL)
    laukas_gr_price.delete(0, END)
    laukas_gr_price.config(state=DISABLED)
    laukas_dz_qty.config(state=NORMAL)
    laukas_dz_qty.delete(0, END)
    laukas_dz_qty.config(state=DISABLED)
    laukas_dz_price.config(state=NORMAL)
    laukas_dz_price.delete(0, END)
    laukas_dz_price.config(state=DISABLED)
    laukas_total.config(state=NORMAL)
    laukas_total.delete(0, END)
    laukas_total.config(state=DISABLED)
    laukas_id.config(state=NORMAL)
    laukas_id.insert(0, 'Iveskite ID ir paspauskite Istrinti')

def trinti():
    trin_id = laukas_id.get()
    trin_project = session.query(Projektai).get(trin_id)
    session.delete(trin_project)
    session.commit()
    laukas_id.delete(0, END)
    laukas_id.config(state=DISABLED)
    listbox.delete(0, END)
    projs = session.query(Projektai).all()
    for x in projs:
        listbox.insert(END, x)

def iseiti():
    langas.destroy()

def on_click1(event):
    laukas_wind_qty.delete(0, END)

def on_click2(event):
    laukas_wind_h.delete(0, END)

def on_click3(event):
    laukas_wind_w.delete(0, END)

def on_click4(event):
    laukas_door_qty.delete(0, END)

def on_click5(event):
    laukas_door_h.delete(0, END)

def on_click6(event):
    laukas_door_w.delete(0, END)

def on_click7(event):
    laukas_fas_sqm.delete(0, END)

def on_click8(event):
    laukas_id.delete(0, END)

def show_message(event):
    messagebox.showinfo('Information', 'Iveskite norimus pakeitimus ir paspauskite Saugoti')

meniu.add_cascade(label='Veiksmai', menu=submeniu)
submeniu.add_command(label='Naujas', command=naujas)
submeniu.add_command(label='Perziureti', command=perziureti)
submeniu.add_command(label='Pakeisti', command=keisti)
submeniu.add_command(label='Istrinti', command=istrinti)
submeniu.add_separator()
submeniu.add_command(label='Iseiti', command=iseiti)

migtukas_new = Button(langas, text='Irasyti', command=irasyti)
migtukas_show = Button(langas, text='Rodyti', command=rodyti)
migtukas_save = Button(langas, text='Saugoti', command=saugoti)
migtukas_delete = Button(langas, text='Istrinti', command=trinti)

migtukas_new.grid(row=11, column=4)
migtukas_show.grid(row=11, column=5)
migtukas_save.grid(row=11, column=6)
migtukas_delete.grid(row=11, column=7)

uzrasas_partner = Label(langas, text='Partneris:').grid(row=0, column=2)
uzrasas_add = Label(langas, text='Adresas:').grid(row=0, column=4)
uzrasas_id = Label(langas, text='Projekto ID').grid(row=0, column=0)

uzrasas1 = Label(langas, text='Langai').grid(row=2, columnspan=8)
uzrasas2 = Label(langas, text='Kiekis:').grid(row=3, column=0)
uzrasas3 = Label(langas, text='Ilgis:').grid(row=3, column=2)
uzrasas4 = Label(langas, text='Plotis').grid(row=3, column=4)
uzrasas5 = Label(langas, text='Plotas:').grid(row=3, column=6)

uzrasas6 = Label(langas, text='Durys').grid(row=5, columnspan=8)
uzrasas7 = Label(langas, text='Kiekis:').grid(row=6, column=0)
uzrasas8 = Label(langas, text='Ilgis:').grid(row=6, column=2)
uzrasas9 = Label(langas, text='Plotis:').grid(row=6, column=4)
uzrasas10 = Label(langas, text='Plotas:').grid(row=6, column=6)

uzrasas11 = Label(langas, text='Fasadas').grid(row=7, columnspan=8)
uzrasas12 = Label(langas, text='Plotas:').grid(row=8, column=0)
uzrasas13 = Label(langas, text='Dazomas plotas:').grid(row=8, column=2)
uzrasas14 = Label(langas, text='Dazai:').grid(row=8, column=4)
uzrasas15 = Label(langas, text='Pakuotes dydis:').grid(row=8, column=6)

uzrasas16 = Label(langas, text='Grunto kiekis').grid(row=9, column=0)
uzrasas17 = Label(langas, text='Grunto kaina').grid(row=9, column=2)
uzrasas18 = Label(langas, text='Dazu kiekis').grid(row=9, column=4)
uzrasas19 = Label(langas, text='Dazu kaina').grid(row=9, column=6)
uzrasas20 = Label(langas, text='Viso projekto kaina').grid(row=10, column=0)

laukas_part = Entry(langas)
laukas_part.grid(row=0, column=3)
laukas_add = Entry(langas)
laukas_add.grid(row=0, column=5)
laukas_id = Entry(langas, state='disabled')
laukas_id.grid(row=0, column=1)

laukas_wind_qty = Entry(langas)
laukas_wind_qty.grid(row=3, column=1)
laukas_wind_h = Entry(langas)
laukas_wind_h.grid(row=3, column=3)
laukas_wind_w = Entry(langas)
laukas_wind_w.grid(row=3, column=5)
laukas_wind_sqm = Entry(langas, state='disabled')
laukas_wind_sqm.grid(row=3, column=7)

laukas_door_qty = Entry(langas)
laukas_door_qty.grid(row=6, column=1)
laukas_door_h = Entry(langas)
laukas_door_h.grid(row=6, column=3)
laukas_door_w = Entry(langas)
laukas_door_w.grid(row=6, column=5)
laukas_door_sqm = Entry(langas, state='disabled')
laukas_door_sqm.grid(row=6, column=7)

laukas_fas_sqm = Entry(langas)
laukas_fas_sqm.grid(row=8, column=1)
laukas_fas_wor = Entry(langas, state='disabled')
laukas_fas_wor.grid(row=8, column=3)
laukas_fas_paint = OptionMenu(langas, pasirinkimas, *paint)
laukas_fas_paint.grid(row=8, column=5)
laukas_fas_vol = Entry(langas, state='disabled')
laukas_fas_vol.grid(row=8, column=7)
laukas_gr_qty = Entry(langas, state='disabled')
laukas_gr_qty.grid(row=9, column=1)
laukas_gr_price = Entry(langas, state='disabled')
laukas_gr_price.grid(row=9, column=3)
laukas_dz_qty = Entry(langas, state='disabled')
laukas_dz_qty.grid(row=9, column=5)
laukas_dz_price = Entry(langas, state='disabled')
laukas_dz_price.grid(row=9, column=7)
laukas_total = Entry(langas, state='disabled')
laukas_total.grid(row=10, column=1)

scroll_y.grid(row=12, column=8, sticky=N+S+W)
listbox.grid(row=12, columnspan=8, sticky=E+W)

laukas_wind_sqm.bind('<Button-1>', wind_sqm)
laukas_door_sqm.bind('<Button-1>', door_sqm)
laukas_wind_qty.bind('<Button-1>', on_click1)
laukas_wind_h.bind('<Button-1>', on_click2)
laukas_wind_w.bind('<Button-1>', on_click3)
laukas_door_qty.bind('<Button-1>', on_click4)
laukas_door_h.bind('<Button-1>', on_click5)
laukas_door_w.bind('<Button-1>', on_click6)
laukas_fas_sqm.bind('<Button-1>', on_click7)
laukas_fas_wor.bind('<Button-1>', paint_wor)
laukas_fas_vol.bind('<Button-1>', pack_vol)
laukas_id.bind('<Button-1>', on_click8)
langas.bind('<Return>', parodymas, add='+')
langas.bind('<Return>', show_message, add='+')

langas.mainloop()
